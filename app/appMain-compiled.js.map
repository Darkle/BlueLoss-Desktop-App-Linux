{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./app/appMain.lsc","webpack:///./app/components/bluelossConfig/browsersProfileFileData/browserProfileData.lsc","webpack:///./app/components/bluelossConfig/createBlueLossConfig.lsc","webpack:///./app/components/bluetooth/bluetoothScan.lsc","webpack:///./app/components/bluetooth/handleScanResults.lsc","webpack:///./app/components/bluetooth/lockCheck.lsc","webpack:///./app/components/enableDisableBlueLoss.lsc","webpack:///./app/components/lockSystem.lsc","webpack:///./app/components/logging/customRollbarTransport.lsc","webpack:///./app/components/logging/logSettingsUpdates.lsc","webpack:///./app/components/logging/logging.lsc","webpack:///./app/components/makeSingleInstance.lsc","webpack:///./app/components/runOnStartup.lsc","webpack:///./app/components/sendOSnotification.lsc","webpack:///./app/components/server/server.lsc","webpack:///./app/components/server/validation.lsc","webpack:///./app/components/settings/devices.lsc","webpack:///./app/components/settings/settings.lsc","webpack:///./app/components/settings/settingsDefaults.lsc","webpack:///./app/components/settings/settingsObservers.lsc","webpack:///./app/components/settingsWindow/settingsWindow.lsc","webpack:///./app/components/tray/iconsData.lsc","webpack:///./app/components/tray/tray.lsc","webpack:///./app/components/utils.lsc","webpack:///external \"body-parser\"","webpack:///external \"child_process\"","webpack:///external \"dotenv\"","webpack:///external \"express\"","webpack:///external \"fs-extra\"","webpack:///external \"gawk\"","webpack:///external \"is-empty\"","webpack:///external \"joi\"","webpack:///external \"lodash.omit\"","webpack:///external \"lowdb\"","webpack:///external \"lowdb/adapters/FileSync\"","webpack:///external \"os\"","webpack:///external \"path\"","webpack:///external \"promise-rat-race\"","webpack:///external \"rollbar\"","webpack:///external \"signal-exit\"","webpack:///external \"sse-pusher\"","webpack:///external \"systray\"","webpack:///external \"timeproxy\"","webpack:///external \"typa\"","webpack:///external \"untildify\"","webpack:///external \"util\"","webpack:///external \"winston\""],"names":["require","config","path","resolve","__dirname","then","makeSingleInstance","initSettings","initLogging","initTrayMenu","startServer","setUpDev","firstRunSetup","scanForBlueToothDevices","catch","bailOnFatalError","firstRun","Promise","openSettingsWindow","process","on","getScreenResolution","screenResolution","generateBrowserWindowPosition","browserWindowPosition","screenHeight","screenWidth","Math","round","width","height","toString","trim","split","Number","e","console","error","getFirefoxUserChrome","getFirefoxPrefsJs","getChromePrefs","join","os","homedir","blueLossConfigFolderPath","fs","pathExists","blueLossSettingsFilePath","exists","ensureFile","ensureDir","blueLossLogsFolderPath","createChromiumProfileFiles","createFirefoxProfileFiles","blueLossConfigChromiumPrefsFilePath","writeJson","blueLossConfigChromiumFirstRunFilePath","blueLossConfigFirefoxUserChromeFilePath","blueLossConfigFirefoxPrefsFilePath","outputFile","createBlueLossConfig","getBlueLossLogsFolderPath","getBlueLossConfigFolderPath","getBlueLossSettingsFilePath","Set","blueLossEnabled","scheduleScan","logger","verbose","spawnHciToolScan","spawnedScans","add","scan","stdout","handleScanResults","err","delete","tp","scanInterval","kill","scanResult","getDeviceDataFromScanResult","deviceList","devicesToSearchFor","addTimeStampToSeenDevices","timeStampedDeviceList","updateDevicesToSearchFor","deviceId","Date","now","replace","results","length","reduce","resultsArr","nextResult","splitIDandName","deviceName","device","lastSeen","timeToLock","deviceHasBeenLost","lastTimeSawDevice","lockSystemIfDeviceLost","toggleFromSysTray","generateNotifcationText","enableDisableBlueLoss","getExecNameFromStdOut","lockCommand","lockCommandArgs","lockSystem","rollbarLogger","Rollbar","accessToken","env","rollbarAccessToken","enabled","captureUncaught","captureUnhandledRejections","environment","reportLevel","payload","platform","BlueLossVersion","version","transform","server","winston","transports","CustomLogger","options","Object","assign","util","inherits","CustomRollbarTransport","Transport","prototype","log","level","msg","callback","createRollbarLogger","newSettingKey","newSettingValue","is","obj","debugMessage","logSettingsUpdateForVerboseLogging","name","handleExceptions","humanReadableUnhandledException","maxsize","fiveHundredKilobytes","maxFiles","prettyPrint","depth","Logger","initialLogLevel","exitOnError","File","fileTransportOptions","filename","Console","configure","rollbarTransportOptions","remove","addRollbarLogging","removeRollbarLogging","changeLogLevel","weCreatedLockFile","getLockFilePath","Error","anotherInstanceErrorMessage","exit","removeSync","autoStartFolder","bluelossDesktopFilePath","generateDesktopFile","execPath","cwd","enableRunOnStartup","disableRunOnStartup","message","notificationExec","noop","sendOSnotification","serverAddress","frontEndDirPath","expressApp","use","express","static","assetsPath","jsPath","bodyParser","json","get","req","res","cookie","generateServerSettingsCookie","sendFile","settingsPagePath","post","validateGeneralUpdatePost","updateSettingsPostHandler","validateEnableDisableUpdatePost","blueLossEnableDisableUpdatePostHandler","push","handler","listen","storeServerAddress","listener","address","settingName","entries","body","end","blueLossToggledFromTray","family","port","toLowerCase","ip","settingValue","stringify","getServerAddress","pushUpdatesToFrontEnd","Joi","object","keys","boolean","runOnStartup","number","integer","min","defaultSettings","reportErrors","verboseLogging","next","generalUpdatePostBodyValidationSchema","blueLossEnabledDisabledPostBodyValidationSchema","schema","validate","validationError","status","newTimeStamp","deviceToUpdate","updateTimeStampForSingleDeviceSearchingFor","updateTimeStampForAllDevicesSearchingFor","db","settings","FileSync","defaults","write","getState","set","updateSetting","getSettings","trayIconColor","gawk","watch","initSettingsObservers","spawnedSettingsWindow","killSpawnedSettingsWindow","openSettingsWindowInPreferredBrowser","xdgOpenServerWebPage","browser","reject","generateBrowserParams","getBrowserProfilePath","browserType","base64IconData","systray","SysTray","menu","icon","tooltip","items","generateMenuItems","debug","copyDir","onClick","systrayClickHandler","onReady","action","seq_id","toggleTrayIconColorSetting","updateSystrayIcon","sendAction","type","item","checked","title","generateEnabledDisabledLabel","disableEnableBlueLossMenuActionItemNumber","newColor","updateEnabledDisabledMenuItem","execFile","exec","ISDEV","param","FIVE_HUNDRED_WEEKS","slice","execName","lastIndexOf","today","getHours","getMinutes","getSeconds","pExecFile","pExec","identity","tenYearsFromNow","xdgOpenLogsFolder","generateLogTimeStamp"],"mappings":"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","file":"appMain-compiled.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./app/appMain.lsc\");\n","import path from 'path'\nrequire('dotenv').config({path: path.resolve(__dirname, '..', 'config','.env')})\n\nimport { createBlueLossConfig as initAppConfigFiles } from './components/bluelossConfig/createBlueLossConfig.lsc'\nimport { makeSingleInstance } from './components/makeSingleInstance.lsc'\nimport { initSettings, updateSetting, getSettings } from './components/settings/settings.lsc'\nimport { initLogging } from './components/logging/logging.lsc'\nimport { initTrayMenu } from './components/tray/tray.lsc'\nimport { startServer } from './components/server/server.lsc'\nimport { setUpDev, bailOnFatalError } from './components/utils.lsc'\nimport { scanForBlueToothDevices } from './components/bluetooth/bluetoothScan.lsc'\nimport { openSettingsWindow } from './components/settingsWindow/settingsWindow.lsc'\nimport { enableRunOnStartup } from './components/runOnStartup.lsc'\n\ninitAppConfigFiles()\n  .then(makeSingleInstance)\n  .then(initSettings)\n  .then(initLogging)\n  .then(initTrayMenu)\n  .then(startServer)\n  .then(setUpDev)\n  .then(firstRunSetup)\n  .then(scanForBlueToothDevices)\n  .catch(bailOnFatalError)\n\nfirstRunSetup():Promise ->\n  { firstRun } = getSettings()\n  if !firstRun: return Promise.resolve()\n  updateSetting('firstRun', !firstRun)\n  enableRunOnStartup(firstRun).then(openSettingsWindow)\n\nprocess.on('unhandledRejection', bailOnFatalError)\nprocess.on('uncaughtException', bailOnFatalError)\n","import { execSync } from 'child_process'\n\ngetFirefoxUserChrome():string -> `\n@-moz-document url(chrome://browser/content/browser.xul) {\n#TabsToolbar {\n  visibility: collapse !important;\n}\n#nav-bar {\n  visibility: collapse !important;\n}\n}\n`\n\ngetFirefoxPrefsJs():String -> `\nuser_pref(\"browser.tabs.warnOnClose\", false);\nuser_pref(\"browser.sessionstore.restore_on_demand\", false);\nuser_pref(\"browser.tabs.warnOnCloseOtherTabs\", false);\n`\n/*****\n* Localhost addresses\n* ::\n* ::1\n* 0.0.0.0\n* 127.0.0.1\n*/\ngetChromePrefs():Object ->\n  screenResolution = getScreenResolution()\n  if !screenResolution: return ({})\n  browserWindowPosition = generateBrowserWindowPosition(screenResolution)\n  ({\n    \"browser\": {\n      \"app_window_placement\": {\n        \"[::]_/\": {\n          \"maximized\": false,\n          ...browserWindowPosition\n        },\n        \"[::1]_/\": {\n          \"maximized\": false,\n          ...browserWindowPosition\n        },\n        \"0\": {\n          \"0\": {\n            \"0\": {\n              \"0_/\": {\n                \"maximized\": false,\n                ...browserWindowPosition\n              }\n            }\n          }\n        },\n        \"127\": {\n          \"0\": {\n            \"0\": {\n              \"1_/\": {\n                \"maximized\": false,\n                ...browserWindowPosition\n              }\n            }\n          }\n        },\n      },\n    }\n  })\n\n/*****\n* We want the chromium browser to end up in the center of the screen\n* with a width of 910px and a height of 760px. It's ok if the users screen\n* dimensions change later as when they move the window and close it, chromium\n* updates that in the Preferences file.\n*/\ngenerateBrowserWindowPosition({ screenHeight, screenWidth }):Object ->\n  (\n    {\n      \"top\": Math.round((screenHeight/2) - (760/2)),\n      \"bottom\": Math.round((screenHeight/2) + (760/2)),\n      \"left\": Math.round((screenWidth/2) - (910/2)),\n      \"right\": Math.round((screenWidth/2) + (910/2))\n    }\n  )\n\ngetScreenResolution():Object|null ->\n  try:\n    [ width, height ] = execSync(`xrandr |grep \\\\* |awk '{print $1}'`)\n      .toString()\n      .trim()\n      .split('x')\n    return { screenWidth: Number(width), screenHeight: Number(height) }\n  catch(e):\n    //winston logger isn't ready yet here, so fall back to using console\n    console.error(e)\n    return null\n\nexport {\n  getFirefoxUserChrome,\n  getFirefoxPrefsJs,\n  getChromePrefs,\n}\n","import os from 'os'\nimport path from 'path'\n\nimport fs from 'fs-extra'\n\nimport { getChromePrefs, getFirefoxUserChrome, getFirefoxPrefsJs } from './browsersProfileFileData/browserProfileData.lsc'\n\nblueLossConfigFolderPath = path.join(os.homedir(), '.config', 'BlueLoss')\nblueLossSettingsFilePath = path.join(blueLossConfigFolderPath, 'blueloss-settings.json')\nblueLossLogsFolderPath = path.join(blueLossConfigFolderPath, 'logs')\nblueLossConfigChromiumFirstRunFilePath = path.join(blueLossConfigFolderPath, 'BrowserProfiles', 'chromium', 'First Run')\nblueLossConfigChromiumPrefsFilePath = path.join(blueLossConfigFolderPath, 'BrowserProfiles', 'chromium', 'Default', 'Preferences')\nblueLossConfigFirefoxUserChromeFilePath = path.join(blueLossConfigFolderPath, 'BrowserProfiles', 'firefox', 'chrome', 'userChrome.css')\nblueLossConfigFirefoxPrefsFilePath = path.join(blueLossConfigFolderPath, 'BrowserProfiles', 'firefox', 'prefs.js')\n\ncreateBlueLossConfig():Promise -/>\n  exists <- fs.pathExists(blueLossSettingsFilePath)\n  if exists: return Promise.resolve()\n  <- [fs.ensureFile(blueLossSettingsFilePath),\n    fs.ensureDir(blueLossLogsFolderPath),\n    createChromiumProfileFiles(),\n    createFirefoxProfileFiles()]\n\ncreateChromiumProfileFiles():Promise ->\n  fs.ensureFile(blueLossConfigChromiumPrefsFilePath)\n    .then(() -> fs.writeJson(blueLossConfigChromiumPrefsFilePath, getChromePrefs()))\n    .then(() -> fs.ensureFile(blueLossConfigChromiumFirstRunFilePath))\n\ncreateFirefoxProfileFiles():Promise ->\n  fs.ensureFile(blueLossConfigFirefoxUserChromeFilePath)\n    .then(() -> fs.ensureFile(blueLossConfigFirefoxPrefsFilePath))\n    .then(() -> fs.outputFile(blueLossConfigFirefoxUserChromeFilePath, getFirefoxUserChrome()))\n    .then(() -> fs.outputFile(blueLossConfigFirefoxPrefsFilePath, getFirefoxPrefsJs()))\n\ngetBlueLossLogsFolderPath():String -> blueLossLogsFolderPath\ngetBlueLossConfigFolderPath():String -> blueLossConfigFolderPath\ngetBlueLossSettingsFilePath():String -> blueLossSettingsFilePath\n\nexport {\n  createBlueLossConfig,\n  getBlueLossLogsFolderPath,\n  getBlueLossConfigFolderPath,\n  getBlueLossSettingsFilePath,\n}\n","import { spawn } from 'child_process'\n\nimport tp from 'timeproxy'\nimport onExit from 'signal-exit'\n\nimport { handleScanResults } from './handleScanResults.lsc'\nimport { logger } from '../logging/logging.lsc'\nimport { getSettings } from '../settings/settings.lsc'\nimport { generateLogTimeStamp as timeStamp } from '../utils.lsc'\n\nspawnedScans = new Set()\n\n/*****\n* We don't return a promise here as we want scanForBlueToothDevices to\n* be spun off seperately. Also, if we returned a promise here that calls\n* itself recursively we get stuck in appMain.lsc.\n* Also we store the running scans in an set so that we can easily kill whatever\n* is running on exit - it's possible one scan may not be finished by the time a new scan\n* starts, so that's why we keep a record of all the currently running scans instead\n* of just the latest one.\n*/\nscanForBlueToothDevices():void ->\n  if !getSettings().blueLossEnabled: return scheduleScan()\n  logger.verbose(`=======New Scan Started======= ${ timeStamp() }`)\n  spawnHciToolScan()\n  scheduleScan()\n\nspawnHciToolScan():void ->\n  scan = spawn('hcitool', ['scan'])\n  spawnedScans.add(scan)\n\n  scan.stdout.on('data', handleScanResults)\n  scan.on('error', (err):void ->\n    logger.verbose(err)\n    spawnedScans.delete(scan)\n  )\n  scan.on('close', () -> spawnedScans.delete(scan))\n\nscheduleScan():Promise ->\n  setTimeout(\n    scanForBlueToothDevices,\n    tp`${ getSettings().scanInterval } seconds`\n  )\n\nonExit(() => {\n  for scan of spawnedScans: scan.kill()\n})\n\nexport {\n  scanForBlueToothDevices,\n}\n\n","import isEmpty from 'is-empty'\n\nimport { logger } from '../logging/logging.lsc'\n\nimport { getSettings } from '../settings/settings.lsc'\nimport { pushUpdatesToFrontEnd } from '../server/server.lsc'\nimport { updateTimeStampForSingleDeviceSearchingFor } from '../settings/devices.lsc'\nimport { lockSystemIfDeviceLost } from './lockCheck.lsc'\n\n/*****\n* We check for blueLossEnabled before calling updateDevicesToSearchFor because if\n* they disable blueloss and a scan hasn't finished, when it does finish it will\n* update the devices lastSeen in devicesToSearchFor with Date.now() which is not\n* what we want. As you can see in settingsObservers.lsc, we need to update the\n* devices lastSeen with tenYearsFromNow(). More comments in settingsObservers.lsc.\n*/\nhandleScanResults(scanResult:Buffer):void ->\n  deviceList = getDeviceDataFromScanResult(scanResult)\n  logger.verbose(`Found these Bluetooth devices in scan: `, { deviceList })\n\n  { devicesToSearchFor, blueLossEnabled } = getSettings()\n  timeStampedDeviceList = addTimeStampToSeenDevices(deviceList)\n\n  pushUpdatesToFrontEnd('devicesCanSee', timeStampedDeviceList)\n\n  if isEmpty(devicesToSearchFor) || !blueLossEnabled: return\n  updateDevicesToSearchFor(devicesToSearchFor, deviceList)\n  lockSystemIfDeviceLost()\n\n/**\n* If any devices we are looking for showed up in the latest scan,\n* update the device's lastSeen value to now in devicesToSearchFor.\n*/\nupdateDevicesToSearchFor(devicesToSearchFor, deviceList):void ->\n  for elem { deviceId } in deviceList:\n    if devicesToSearchFor[deviceId]:\n      updateTimeStampForSingleDeviceSearchingFor(deviceId, Date.now())\n\n/*****\n* result will be a buffer which as text looks like:\n* \"Scanning ...\\tE0:88:61:CF:F3:52\\tMotoG3\\n\\t12:30:D3:CD:32:51\\tn/a\\n\"\n*/\ngetDeviceDataFromScanResult(scanResult:Buffer):Array<DeviceType> ->\n  results = scanResult?.toString().trim().replace('Scanning ...', '')\n  if !results?.length: return []\n\n  results.split('\\n').reduce((resultsArr, nextResult) ->\n    splitIDandName = nextResult.trim().split('\\t')\n    deviceId = splitIDandName[0].trim()\n    deviceName = splitIDandName[1].trim()\n    [...resultsArr, {deviceId, deviceName} ]\n  )\n\naddTimeStampToSeenDevices(deviceList: Array<DeviceType>):Array<DeviceType> ->\n  [ ...for elem device in deviceList: [{...device, lastSeen: Date.now()}] ]\n\nexport {\n  handleScanResults,\n}\n","import tp from 'timeproxy'\n\nimport { tenYearsFromNow } from '../utils.lsc'\nimport { getSettings } from '../settings/settings.lsc'\nimport { updateTimeStampForSingleDeviceSearchingFor } from '../settings/devices.lsc'\nimport { lockSystem } from '../lockSystem.lsc'\n\n/**\n* If a device is lost we lock the computer, however, after that, if\n* the computer is unlocked without the device coming back, we don't want\n* to keep locking the computer because the device is still lost. So we\n* give the device that has just been lost a lastSeen value of 10 years\n* from now (not using Infinity cause it doesn't JSON.stringify for storage).\n*/\nlockSystemIfDeviceLost():void ->\n  { devicesToSearchFor, timeToLock, blueLossEnabled } = getSettings()\n  for val { lastSeen, deviceId } in devicesToSearchFor:\n    if deviceHasBeenLost(lastSeen, timeToLock):\n      lockSystem(blueLossEnabled)\n      updateTimeStampForSingleDeviceSearchingFor(deviceId, tenYearsFromNow())\n\ndeviceHasBeenLost(lastTimeSawDevice: number, timeToLock: number):boolean ->\n  Date.now() > (lastTimeSawDevice + tp`${ timeToLock } minutes`)\n\nexport {\n  lockSystemIfDeviceLost\n}\n\n","import { pushUpdatesToFrontEnd } from './server/server.lsc'\nimport { tenYearsFromNow } from './utils.lsc'\nimport { updateTimeStampForAllDevicesSearchingFor } from './settings/devices.lsc'\nimport { updateSetting } from './settings/settings.lsc'\nimport { updateEnabledDisabledMenuItem as updateSysTrayEnabledDisabledMenuItem } from './tray/tray.lsc'\nimport { sendOSnotification } from './sendOSnotification.lsc'\n\n/*****\n* We aren't using a gawk observer for blueLossEnabled as we were running in to\n* circular issues.\n*\n* We run `updateTimeStampForAllDevicesSearchingFor(tenYearsFromNow())` when BlueLoss\n* is disabled because otherwise if you disabled BlueLoss and devices that you are\n* looking for went away and then re-enabled BlueLoss, it would lock straight away.\n*\n* Also update the frontend when we enable/disable BlueLoss from the systray.\n*/\nenableDisableBlueLoss(toggleFromSysTray: Boolean, blueLossEnabled: Boolean):void ->\n  updateSetting('blueLossEnabled', blueLossEnabled)\n  if toggleFromSysTray: pushUpdatesToFrontEnd('blueLossEnabled', blueLossEnabled)\n  if !blueLossEnabled: updateTimeStampForAllDevicesSearchingFor(tenYearsFromNow())\n  updateSysTrayEnabledDisabledMenuItem()\n  sendOSnotification(generateNotifcationText(blueLossEnabled))\n\ngenerateNotifcationText(blueLossEnabled: Boolean):String ->\n  if blueLossEnabled: 'BlueLoss Enabled' else: 'BlueLoss Disabled'\n\nexport {\n  enableDisableBlueLoss\n}\n","import pRatRace from 'promise-rat-race'\n\nimport { logger } from './logging/logging.lsc'\nimport { getExecNameFromStdOut, pExec, pExecFile } from './utils.lsc'\n\nlockCommandArgs = {\n  'xdg-screensaver': 'lock',\n  'gnome-screensaver-command': '--lock',\n  'cinnamon-screensaver-command': '--lock',\n  'dm-tool': 'lock',\n}\n\n/*****\n* Based on: https://github.com/sindresorhus/lock-system/blob/master/index.js\n* The spawned xdg-screensaved command always seems to error for me even though\n* the command actually succeeds, so only log the error when verbose logging is enabled.\n* Note: we need to use exec (pExec) to run 'command -v ...' as that is a\n* shell-specific command.\n*/\nlockSystem(blueLossEnabled):void ->\n  if !blueLossEnabled: return\n  pRatRace([\n    pExec('command -v xdg-screensaver'),\n    pExec('command -v gnome-screensaver-command'),\n    pExec('command -v cinnamon-screensaver-command'),\n    pExec('command -v dm-tool'),\n  ])\n  .then(getExecNameFromStdOut)\n  .then(lockCommand -> pExecFile(lockCommand, [ lockCommandArgs[lockCommand] ]))\n  .catch(logger.verbose)\n\n\nexport {\n  lockSystem\n}\n","import util from 'util'\n\nimport winston from 'winston'\nimport Rollbar from 'rollbar'\n\nlet rollbarLogger = null\n\ncreateRollbarLogger():void ->\n  now rollbarLogger = new Rollbar({\n    accessToken: process.env.rollbarAccessToken,\n    enabled: false,\n    captureUncaught: true,\n    captureUnhandledRejections: true,\n    environment: process.env.NODE_ENV,\n    reportLevel: 'error',\n    payload: {\n      platform: process.platform,\n      BlueLossVersion: require('../../../package.json').version\n    },\n    // Ignore the server stuff cause that includes info about the host pc name.\n    transform(payload){\n      payload.server = {}\n    },\n  })\n\nCustomRollbarTransport = winston.transports.CustomLogger = (options):void ->\n  Object.assign(this, options)\n\nutil.inherits(CustomRollbarTransport, winston.Transport)\n\nCustomRollbarTransport.prototype.log = (level, msg = '', error, callback):void ->\n  // Only log errors.\n  if level !== 'error': return\n  rollbarLogger.error(msg, error)\n  callback(null, true)\n\n\nexport {\n  createRollbarLogger\n  CustomRollbarTransport\n  rollbarLogger\n}\n","import is from 'typa'\n\nimport { logger } from './logging.lsc'\n\n\nlogSettingsUpdateForVerboseLogging(newSettingKey: String, newSettingValue: SettingsTypes):void ->\n  /*****\n  * Check if the logger is instantiated first as logSettingsUpdateForVerboseLogging gets\n  * called early on startup.\n  */\n  if !logger: return\n  debugMessage = `Updated Setting: updated '${ newSettingKey }' with:`\n  if is.obj(newSettingValue):\n    logger.verbose(debugMessage, { [newSettingKey]: newSettingValue })\n  else:\n    logger.verbose(`${ debugMessage } ${ newSettingValue }`)\n\n\nexport {\n  logSettingsUpdateForVerboseLogging\n}\n","import path from 'path'\n\nimport winston from 'winston'\n\nimport { CustomRollbarTransport, rollbarLogger, createRollbarLogger } from './customRollbarTransport.lsc'\nimport { getSettings } from '../settings/settings.lsc'\nimport { getBlueLossLogsFolderPath } from '../bluelossConfig/createBlueLossConfig.lsc'\n\nlet logger = null\nrollbarTransportOptions = {\n  name: 'rollbarTransport',\n  level: 'error',\n  handleExceptions: true,\n  humanReadableUnhandledException: true,\n}\nfiveHundredKilobytes = 500000\nfileTransportOptions = {\n  maxsize: fiveHundredKilobytes,\n  maxFiles: 6,\n  prettyPrint: true,\n  depth: 10,\n}\n\ninitLogging():void ->\n  /*****\n  * Note: we're using the old Winston 2.4 branch: https://github.com/winstonjs/winston/tree/2.4.0\n  */\n  now logger = new winston.Logger({\n    level: initialLogLevel(),\n    exitOnError: false\n  })\n\n  logger.add(\n    winston.transports.File,\n    {\n      ...fileTransportOptions,\n      filename: path.join(getBlueLossLogsFolderPath(), 'BlueLoss.log.txt'),\n    }\n  )\n\n  if ISDEV:\n    logger.add(winston.transports.Console, {\n      handleExceptions: true,\n      humanReadableUnhandledException: true,\n    })\n\n  createRollbarLogger()\n  /*****\n  * We dont send errors to rollbar in dev and also only if enabled.\n  */\n  if !ISDEV and getSettings().reportErrors:\n    addRollbarLogging()\n\naddRollbarLogging():void ->\n  /**\n  * We also need to enable/disable the rollbar module itself as well,\n  * as it is set to report uncaught exceptions as well as logging\n  * caught errors.\n  */\n  rollbarLogger.configure({enabled: true})\n  logger.add(CustomRollbarTransport, rollbarTransportOptions)\n\nremoveRollbarLogging():void ->\n  rollbarLogger.configure({enabled: false})\n  logger.remove('rollbarTransport')\n\ninitialLogLevel():String ->\n  if ISDEV || getSettings().verboseLogging: 'verbose' else: 'error'\n\nchangeLogLevel(level):void ->\n  logger.level = level\n\nexport {\n  logger,\n  addRollbarLogging,\n  removeRollbarLogging,\n  changeLogLevel,\n  initLogging,\n}\n","import path from 'path'\n\nimport fs from 'fs-extra'\nimport onExit from 'signal-exit'\n\nimport { getBlueLossConfigFolderPath } from './bluelossConfig/createBlueLossConfig.lsc'\n\nlet weCreatedLockFile = false\nanotherInstanceErrorMessage = 'BlueLoss is already running (BlueLoss.lock file already exists), exiting...'\n\nmakeSingleInstance():Promise -/>\n  if ISDEV: return Promise.resolve()\n  exists <- fs.pathExists(getLockFilePath())\n  if exists:\n    console.error(new Error(anotherInstanceErrorMessage))\n    return process.exit(1)\n  now weCreatedLockFile = true\n  fs.ensureFile(getLockFilePath())\n\nonExit(() => {\n  if weCreatedLockFile:\n    try: fs.removeSync(getLockFilePath())\n    catch(e): return\n})\n\ngetLockFilePath():String -> path.join(getBlueLossConfigFolderPath(), 'BlueLoss.lock')\n\nexport {\n  makeSingleInstance\n}\n","import path from 'path'\n\nimport untildify from 'untildify'\nimport fs from 'fs-extra'\n\nimport { logger } from './logging/logging.lsc'\n\nautoStartFolder = untildify('~/.config/autostart/')\nbluelossDesktopFilePath = path.join(autoStartFolder, 'BlueLoss.desktop')\n\nenableRunOnStartup(firstRun):Promise ->\n  if firstRun and ISDEV: return Promise.resolve()\n  fs.outputFile(bluelossDesktopFilePath, generateDesktopFile())\n    .catch(logger.error)\n\ndisableRunOnStartup():Promise ->\n  fs.remove(bluelossDesktopFilePath).catch(logger.error)\n\n/*****\n* https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-1.0.html\n* \"Version\" is the Free Desktop spec version.\n*/\ngenerateDesktopFile():String -> `\n[Desktop Entry]\nType=Application\nVersion=1.0\nName=BlueLoss\nExec=${ process.execPath }\nIcon=${ path.join(process.cwd(), 'BlueLoss.png') }\nStartupNotify=false\nTerminal=false\nCategories=Utility;\n`.trim()\n\nexport {\n  enableRunOnStartup,\n  disableRunOnStartup,\n}\n","import { noop, getExecNameFromStdOut, pExec, pExecFile } from './utils.lsc'\n\n/*****\n* Note: we need to use exec (pExec) to run 'command -v ...' as that is a\n* shell-specific command.\n*/\nsendOSnotification(message:String):void ->\n  pExec('command -v notify-send')\n  .then(getExecNameFromStdOut)\n  .then(notificationExec ->\n    pExecFile(notificationExec,\n      if notificationExec === 'zenity': ['--notification', `--text=\"${ message }\"`]\n      else: [message]\n    )\n  )\n  .catch(noop)\n\nexport {\n  sendOSnotification\n}\n","import path from 'path'\n\nimport express from 'express'\nimport bodyParser from 'body-parser'\nimport ssePusher from 'sse-pusher'\nimport omit from 'lodash.omit'\n\nimport { logger } from '../logging/logging.lsc'\nimport { updateSetting, getSettings } from '../settings/settings.lsc'\nimport { validateGeneralUpdatePost, validateEnableDisableUpdatePost } from './validation.lsc'\nimport { enableDisableBlueLoss } from '../enableDisableBlueLoss.lsc'\n\nlet serverAddress = null\nfrontEndDirPath = path.resolve(__dirname, '..', 'app', 'components', 'settingsWindow', 'frontEnd')\nassetsPath = path.join(frontEndDirPath, 'assets')\njsPath = path.join(frontEndDirPath, 'js')\nsettingsPagePath = path.join(frontEndDirPath, 'html', 'settingsWindow.html')\nblueLossToggledFromTray = false\n\npush = ssePusher()\nexpressApp = express()\n\nexpressApp.use('/assets', express.static(assetsPath))\nexpressApp.use('/js', express.static(jsPath))\nexpressApp.use(bodyParser.json())\nexpressApp.get('/', (req, res) ->\n  res.cookie('bluelossSettings', generateServerSettingsCookie())\n  res.sendFile(settingsPagePath)\n)\nexpressApp.post('/updatesettings',\n  validateGeneralUpdatePost,\n  updateSettingsPostHandler\n)\n/*****\n* Check comments in enableDisableBlueLoss.lsc for why we need a seperate api path for\n* updates to blueLossEnabled.\n*/\nexpressApp.post('/blueloss-enabled-disabled-from-frontend',\n  validateEnableDisableUpdatePost,\n  blueLossEnableDisableUpdatePostHandler\n)\nexpressApp.use('/sse-update', push.handler())\n\n/*****\n* If port is 0, the operating system will assign an arbitrary unused port.\n*/\nstartServer():Promise ->\n  new Promise(resolve => {\n    listener = expressApp.listen(0, () => {\n      storeServerAddress(listener.address())\n      resolve()\n    })\n  })\n\n/*****\n* The frontend only updates (sends back) one setting at a time.\n* Object.entries returns an array of arrays of key/value pairs for an object.\n*/\nupdateSettingsPostHandler(req, res):Function ->\n  [[settingName, newSettingValue]] = Object.entries(req.body)\n  updateSetting(settingName, newSettingValue)\n  res.end()\n\nblueLossEnableDisableUpdatePostHandler(req, res):Function ->\n  [[, blueLossEnabled]] = Object.entries(req.body)\n  enableDisableBlueLoss(blueLossToggledFromTray, blueLossEnabled)\n  res.end()\n\nstoreServerAddress({family, address, port}):void ->\n  ip = if family.toLowerCase() === 'ipv6': `[${ address }]` else: address\n  now serverAddress = `http://${ ip }:${ port }`\n  logger.verbose('serverAddress: ', serverAddress)\n\ngetServerAddress():String -> serverAddress\n\npushUpdatesToFrontEnd(settingName, settingValue):void ->\n  push('settingsUpdate', {[settingName]: settingValue})\n\ngenerateServerSettingsCookie():String ->\n  JSON.stringify(omit(getSettings(), ['trayIconColor', 'firstRun']))\n\nexport{\n  startServer,\n  getServerAddress,\n  pushUpdatesToFrontEnd,\n}\n","import Joi from 'joi'\n\nimport { defaultSettings } from '../settings/settingsDefaults.lsc'\nimport { logger } from '../logging/logging.lsc'\n\ngeneralUpdatePostBodyValidationSchema = Joi.object().keys({\n  blueLossEnabled: Joi.boolean(),\n  runOnStartup: Joi.boolean(),\n  devicesToSearchFor: Joi.object(),\n  timeToLock: Joi.number().integer().min(defaultSettings.timeToLock),\n  scanInterval: Joi.number().integer().min(defaultSettings.scanInterval),\n  reportErrors: Joi.boolean(),\n  verboseLogging: Joi.boolean(),\n})\n\nblueLossEnabledDisabledPostBodyValidationSchema = Joi.object().keys({\n  blueLossEnabled: Joi.boolean(),\n})\n\nvalidateGeneralUpdatePost(req, res, next):Function ->\n  validate(req, res, next, generalUpdatePostBodyValidationSchema)\n\nvalidateEnableDisableUpdatePost(req, res, next):Function ->\n  validate(req, res, next, blueLossEnabledDisabledPostBodyValidationSchema)\n\nvalidate(req, res, next, schema):Function ->\n  validationError = Joi.validate(req?.body, schema)?.error\n  if validationError:\n    logger.error(validationError)\n    return res.status(400).end()\n  next()\n\nexport {\n  validateGeneralUpdatePost,\n  validateEnableDisableUpdatePost,\n}\n","import { getSettings, updateSetting } from './settings.lsc'\n\nupdateTimeStampForSingleDeviceSearchingFor(deviceId: String, newTimeStamp: Number):Object ->\n  { devicesToSearchFor } = getSettings()\n  deviceToUpdate = devicesToSearchFor[deviceId]\n  updateSetting('devicesToSearchFor',\n    {...devicesToSearchFor, [ deviceId ]: {...deviceToUpdate, lastSeen: newTimeStamp }}\n  )\n\nupdateTimeStampForAllDevicesSearchingFor(newTimeStamp: Number):void ->\n  updateSetting('devicesToSearchFor',\n    {\n      ...for key deviceId, val device in getSettings().devicesToSearchFor:\n        {[deviceId]: {...device, lastSeen: newTimeStamp}}\n    }\n  )\n\nexport {\n  updateTimeStampForSingleDeviceSearchingFor,\n  updateTimeStampForAllDevicesSearchingFor,\n}\n","import low from 'lowdb'\nimport FileSync from 'lowdb/adapters/FileSync'\nimport gawk from 'gawk'\n\nimport { defaultSettings } from './settingsDefaults.lsc'\nimport { initSettingsObservers } from './settingsObservers.lsc'\nimport { getBlueLossSettingsFilePath } from '../bluelossConfig/createBlueLossConfig.lsc'\nimport { logSettingsUpdateForVerboseLogging as logSettingsUpdates } from '../logging/logSettingsUpdates.lsc'\nimport { updateTimeStampForAllDevicesSearchingFor } from './devices.lsc'\n\nimport { tenYearsFromNow } from '../utils.lsc'\n\nlet db = null\nlet settings = null\n\ninitSettings():Promise ->\n  new Promise(resolve ->\n    now db = low(new FileSync(getBlueLossSettingsFilePath()))\n    db.defaults(defaultSettings).write()\n    now settings = gawk(db.getState())\n    initSettingsObservers(settings)\n    /**\n    * When a user starts up BlueLoss after previously exiting, the\n    * lastSeen value will be out of date for the devices in\n    * devicesToSearchFor. This would cause BlueLoss to lock the\n    * system straight away because the lastSeen value + timeToLock\n    *  will be less than Date.now(). So to prevent this, we give all\n    * devices in devicesToSearchFor a lastSeen of 10 years from now.\n    * (when a device is seen again during a scan, lastSeen is updated.)\n    */\n    updateTimeStampForAllDevicesSearchingFor(tenYearsFromNow())\n    resolve()\n  )\n\ngetSettings() -> settings\n\nupdateSetting(newSettingKey: string, newSettingValue: SettingsTypes):void ->\n  settings[newSettingKey] = newSettingValue\n  db.set(newSettingKey, newSettingValue).write()\n  logSettingsUpdates(newSettingKey, newSettingValue)\n\n\nexport {\n  initSettings,\n  updateSetting,\n  getSettings,\n}\n","\ndefaultSettings: {\n  blueLossEnabled: Boolean,\n  runOnStartup: Boolean,\n  trayIconColor: String,\n  devicesToSearchFor: Object,\n  timeToLock: Number,\n  reportErrors: Boolean,\n  firstRun: Boolean,\n  scanInterval: Number,\n  verboseLogging: Boolean\n} = {\n  blueLossEnabled: true,\n  runOnStartup: true,\n  trayIconColor: 'blue',\n  devicesToSearchFor: {},\n  timeToLock: 2,\n  reportErrors: true,\n  firstRun: true,\n  scanInterval: 30,\n  verboseLogging: false\n}\n\nexport {\n  defaultSettings\n}\n","import gawk from 'gawk'\n\nimport { addRollbarLogging, removeRollbarLogging, changeLogLevel } from '../logging/logging.lsc'\nimport { enableRunOnStartup, disableRunOnStartup } from '../runOnStartup.lsc'\nimport { noop } from '../utils.lsc'\n\ninitSettingsObservers(settings:Object):void ->\n  gawk.watch(settings, ['reportErrors'], (enabled: Boolean):void ->\n    if enabled: addRollbarLogging()\n    else: removeRollbarLogging()\n  )\n  gawk.watch(settings, ['runOnStartup'], (enabled: Boolean):void ->\n    if enabled: enableRunOnStartup().catch(noop)\n    else: disableRunOnStartup().catch(noop)\n  )\n  gawk.watch(settings, ['verboseLogging'], (enabled: Boolean):void ->\n    changeLogLevel(if enabled: 'verbose' else: 'error')\n  )\n\nexport {\n  initSettingsObservers\n}\n","import { execFile } from 'child_process'\nimport path from 'path'\n\nimport pRatRace from 'promise-rat-race'\nimport onExit from 'signal-exit'\n\nimport { getServerAddress } from '../server/server.lsc'\nimport { getBlueLossConfigFolderPath } from '../bluelossConfig/createBlueLossConfig.lsc'\nimport { getExecNameFromStdOut, xdgOpenServerWebPage, pExec } from '../utils.lsc'\n\nlet spawnedSettingsWindow = null\n\n/*****\n* We don't want to return a Promise here because openSettingsWindowInPreferredBrowser will not\n* resolve until the settings window is closed.\n* Note: we need to use exec (pExec) to run 'command -v ...' as that is a shell-specific command.\n*/\nopenSettingsWindow():void ->\n  /*****\n  * We kill settings window if it's already open so there isn't more than one settings window open\n  * at once. This is slightly inefficiant, but wmctrl wasn't installed by default on my machine, so\n  * gonna do it this way.\n  */\n  killSpawnedSettingsWindow()\n\n  pRatRace([\n    pExec('command -v firefox'),\n    pExec('command -v chromium-browser'),\n    pExec('command -v google-chrome'),\n  ])\n  .then(getExecNameFromStdOut)\n  .then(openSettingsWindowInPreferredBrowser)\n  .catch(xdgOpenServerWebPage)  //fall back to opening with OS's default browser\n\nopenSettingsWindowInPreferredBrowser(browser):Promise ->\n  return new Promise((resolve, reject):void ->\n    now spawnedSettingsWindow = execFile(\n      browser,\n      generateBrowserParams(browser),\n      (error) ->\n        if error: return reject(error)\n        resolve()\n    )\n  )\n\ngenerateBrowserParams(browser):Array<String> ->\n  if browser === 'firefox':\n    return [\n      '-new-instance',\n      '--width=910',\n      '--height=760',\n      '-profile',\n      getBrowserProfilePath('firefox'),\n      getServerAddress(),\n    ]\n  [\n    `--app=${ getServerAddress() }`,\n    `--user-data-dir=${ getBrowserProfilePath('chromium') }`\n  ]\n\ngetBrowserProfilePath(browserType:String):String ->\n  path.join(getBlueLossConfigFolderPath(), 'BrowserProfiles', browserType)\n\nkillSpawnedSettingsWindow():void ->\n  spawnedSettingsWindow?.kill()\n  now spawnedSettingsWindow = null\n\n/*****\n* Kill settings window on app exit.\n*/\nonExit(killSpawnedSettingsWindow)\n\nexport {\n  openSettingsWindow\n}\n","\nbase64IconData = {\n  'white': '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'\n  'blue': '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'\n}\n\nexport {\n  base64IconData\n}\n","import SysTray from 'systray'\n\nimport { updateSetting, getSettings } from '../settings/settings.lsc'\nimport { base64IconData } from './iconsData.lsc'\nimport { xdgOpenLogsFolder } from '../utils.lsc'\nimport { logger } from '../logging/logging.lsc'\nimport { openSettingsWindow } from '../settingsWindow/settingsWindow.lsc'\nimport { enableDisableBlueLoss } from '../enableDisableBlueLoss.lsc'\n\nlet systray = null\nblueLossToggledFromTray = true\ndisableEnableBlueLossMenuActionItemNumber = 1\n\ninitTrayMenu():Promise ->\n  new Promise((resolve):void ->\n    now systray = new SysTray({\n      menu: {\n        icon: base64IconData[getSettings().trayIconColor],\n        tooltip: \"BlueLoss\",\n        items: generateMenuItems()\n      },\n      debug: false,\n      copyDir: true, // copy go tray binary to outside directory, useful for packing tool like pkg.\n    })\n    systray.onClick(systrayClickHandler)\n    systray.onReady(resolve)\n  )\n\n/*****\n* seq_id:\n* 0 - Open settings window\n* 1 - Enable/Disable BlueLoss\n* 2 - Toggle system tray icon color\n* 3 - Open logs folder\n* 4 - Exit BlueLoss\n*/\nsystrayClickHandler(action:Object):void ->\n  if action.seq_id === 0:\n    openSettingsWindow()\n  if action.seq_id === 1:\n    enableDisableBlueLoss(\n      blueLossToggledFromTray,\n      !getSettings().blueLossEnabled,\n    )\n  if action.seq_id === 2:\n    toggleTrayIconColorSetting()\n    updateSystrayIcon(action)\n  if action.seq_id === 3:\n    xdgOpenLogsFolder().catch(logger.error)\n  if action.seq_id === 4:\n    systray.kill()\n\nupdateEnabledDisabledMenuItem():void ->\n  systray.sendAction({\n    type: 'update-item',\n    item: {\n      checked: false,\n      enabled: true,\n      title: generateEnabledDisabledLabel(),\n      tooltip: generateEnabledDisabledLabel(),\n    },\n    seq_id: disableEnableBlueLossMenuActionItemNumber,\n  })\n\nupdateSystrayIcon(action:Object):void ->\n  systray.sendAction({\n    type: 'update-menu',\n    menu: {\n      icon: base64IconData[getSettings().trayIconColor],\n      tooltip: \"BlueLoss\",\n      items: generateMenuItems()\n    },\n    seq_id: action.seq_id,\n  })\n\ngenerateMenuItems():Array ->\n  [\n    {\n      title: \"Open BlueLoss Settings\",\n      tooltip: \"Open BlueLoss Settings\",\n      enabled: true\n    },\n    {\n      title: generateEnabledDisabledLabel(),\n      tooltip: generateEnabledDisabledLabel(),\n      enabled: true\n    },\n    {\n      title: \"Toggle Tray Icon Color\",\n      tooltip: \"Toggle Tray Icon Color\",\n      enabled: true\n    },\n    {\n      title: \"Open Logs\",\n      tooltip: \"Open Logs\",\n      enabled: true\n    },\n    {\n      title: \"Quit BlueLoss\",\n      tooltip: \"Quit BlueLoss\",\n      enabled: true\n    }\n  ]\n\ntoggleTrayIconColorSetting():void ->\n  newColor = if getSettings().trayIconColor === 'white': 'blue' else: 'white'\n  updateSetting('trayIconColor', newColor)\n\ngenerateEnabledDisabledLabel():String ->\n  `${ if getSettings().blueLossEnabled: 'Disable' else: 'Enable' } BlueLoss`\n\nexport {\n  initTrayMenu,\n  updateEnabledDisabledMenuItem,\n}\n","import { promisify } from 'util'\nimport { exec, execFile } from 'child_process'\n\nimport tp from 'timeproxy'\n\nimport { openSettingsWindow } from '../components/settingsWindow/settingsWindow.lsc'\nimport { getSettings } from './settings/settings.lsc'\nimport { getBlueLossLogsFolderPath } from './bluelossConfig/createBlueLossConfig.lsc'\nimport { getServerAddress } from './server/server.lsc'\nimport { logger } from './logging/logging.lsc'\n\npExecFile = promisify(execFile)\npExec = promisify(exec)\n\nsetUpDev():void -> if ISDEV && !getSettings().firstRun: openSettingsWindow()\n\nnoop() -> return\n\nidentity(param) -> param\n\ntenYearsFromNow():Number -> Date.now() + tp.FIVE_HUNDRED_WEEKS\n\ngetExecNameFromStdOut({stdout}):String ->\n  execName = stdout.trim()\n  execName.slice(execName.lastIndexOf('/') +1)\n\nxdgOpenServerWebPage():Promise ->\n  pExecFile(`xdg-open`, [getServerAddress()])\n\nxdgOpenLogsFolder():Promise ->\n  pExecFile(`xdg-open`, [getBlueLossLogsFolderPath()])\n\nbailOnFatalError(err):void ->\n  console.error(err)\n  logger?.error?(err)\n  process.exit(1)\n\ngenerateLogTimeStamp():String ->\n  today = new Date()\n  `[${ today.getHours() }:${ today.getMinutes() }:${ today.getSeconds() }]`\n\nexport {\n  pExecFile,\n  pExec,\n  setUpDev,\n  noop,\n  identity,\n  tenYearsFromNow,\n  getExecNameFromStdOut,\n  xdgOpenServerWebPage,\n  xdgOpenLogsFolder,\n  bailOnFatalError,\n  generateLogTimeStamp,\n}\n","module.exports = require(\"body-parser\");","module.exports = require(\"child_process\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"fs-extra\");","module.exports = require(\"gawk\");","module.exports = require(\"is-empty\");","module.exports = require(\"joi\");","module.exports = require(\"lodash.omit\");","module.exports = require(\"lowdb\");","module.exports = require(\"lowdb/adapters/FileSync\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"promise-rat-race\");","module.exports = require(\"rollbar\");","module.exports = require(\"signal-exit\");","module.exports = require(\"sse-pusher\");","module.exports = require(\"systray\");","module.exports = require(\"timeproxy\");","module.exports = require(\"typa\");","module.exports = require(\"untildify\");","module.exports = require(\"util\");","module.exports = require(\"winston\");"],"sourceRoot":""}