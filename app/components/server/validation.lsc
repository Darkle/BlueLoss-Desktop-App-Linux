import Joi from 'joi'

import { defaultSettings } from '../settings/settingsDefaults.lsc'
import { logger } from '../logging/logging.lsc'

generalUpdatePostBodyValidationSchema = Joi.object().keys({
  blueLossEnabled: Joi.boolean(),
  runOnStartup: Joi.boolean(),
  devicesToSearchFor: Joi.object(),
  timeToLock: Joi.number().integer().min(defaultSettings.timeToLock),
  scanInterval: Joi.number().integer().min(defaultSettings.scanInterval),
  reportErrors: Joi.boolean(),
  verboseLogging: Joi.boolean(),
})

blueLossEnabledDisabledPostBodyValidationSchema = Joi.object().keys({
  blueLossEnabled: Joi.boolean(),
})

validateGeneralUpdatePost(req, res, next):Function ->
  validate(req, res, next, generalUpdatePostBodyValidationSchema)

validateEnableDisableUpdatePost(req, res, next):Function ->
  validate(req, res, next, blueLossEnabledDisabledPostBodyValidationSchema)

validate(req, res, next, schema):Function ->
  validationError = Joi.validate(req?.body, schema)?.error
  if validationError:
    logger.error(validationError)
    return res.status(400).end()
  next()

export {
  validateGeneralUpdatePost,
  validateEnableDisableUpdatePost,
}
