import path from 'path'

import express from 'express'
import bodyParser from 'body-parser'
import ssePusher from 'sse-pusher'
import omit from 'lodash.omit'

import { logger } from '../logging/logging.lsc'
import { updateSetting, getSettings } from '../settings/settings.lsc'
import { validateUpdatePost } from './validation.lsc'

let serverAddress = null
frontEndDirPath = path.resolve(__dirname, '..', 'app', 'components', 'settingsWindow', 'frontEnd')
assetsPath = path.join(frontEndDirPath, 'assets')
jsPath = path.join(frontEndDirPath, 'js')
settingsPagePath = path.join(frontEndDirPath, 'html', 'settingsWindow.html')

push = ssePusher()
expressApp = express()

expressApp.use('/assets', express.static(assetsPath))
expressApp.use('/js', express.static(jsPath))
expressApp.use(bodyParser.json())
expressApp.get('/', (req, res) ->
  res.cookie('bluelossSettings', generateServerSettingsCookie())
  res.sendFile(settingsPagePath)
)
expressApp.post('/updatesettings', validateUpdatePost, updateSettingsPostHandler)
expressApp.use('/sse-update', push.handler())

/*****
* If port is 0, the operating system will assign an arbitrary unused port.
*/
startServer():Promise ->
  new Promise(resolve => {
    listener = expressApp.listen(0, () => {
      storeServerAddress(listener.address())
      resolve()
    })
  })

/*****
* The frontend only updates (sends back) one setting at a time.
* Object.entries returns an array of arrays of key/value pairs for an object.
*/
updateSettingsPostHandler(req, res):Function ->
  [[settingName, newSettingValue]] = Object.entries(req.body)
  updateSetting(settingName, newSettingValue)
  return res.end()

storeServerAddress({family, address, port}):void ->
  ip = if family.toLowerCase() === 'ipv6': `[${ address }]` else: address
  now serverAddress = `http://${ ip }:${ port }`
  logger.verbose('serverAddress: ', serverAddress)

getServerAddress():String -> serverAddress

pushUpdatesToFrontEnd(settingName, settingValue):void ->
  push('settingsUpdate', {[settingName]: settingValue})

generateServerSettingsCookie():String ->
  JSON.stringify(omit(
    getSettings(),
    [
      'trayIconColor',
      'dateLastCheckedForAppUpdate',
      'skipUpdateVersion',
      'firstRun',
    ]
  ))

export{
  startServer,
  getServerAddress,
  pushUpdatesToFrontEnd,
}
