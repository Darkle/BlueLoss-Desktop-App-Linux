import { promisify } from 'util'
import { execFile } from 'child_process'

import tp from 'timeproxy'

import { handleScanResults } from './handleScanResults.lsc'
import { logger } from '../logging/logging.lsc'
import { getSettings } from '../settings/settings.lsc'

pExecFile = promisify(execFile)

/*****
* We don't return a promise here as we want scanForBlueToothDevices to
* be spun off seperately. Also, if we returned a promise here that calls
* itself recursively we get stuck in appMain.lsc.
*/
scanForBlueToothDevices():void ->
  if !getSettings().blueLossEnabled: scheduleScan()
  logger.verbose('=======New Scan Started=======')
  pExecFile('hcitool', ['scan']).then(handleScanResults).catch(logger.error)
  scheduleScan()

scheduleScan():Promise ->
  setTimeout(
    scanForBlueToothDevices,
    tp`${ getSettings().scanInterval } seconds`
  )

export {
  scanForBlueToothDevices,
}

