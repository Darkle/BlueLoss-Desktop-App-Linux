import { spawn } from 'child_process'

import tp from 'timeproxy'
import onExit from 'signal-exit'

import { handleScanResults } from './handleScanResults.lsc'
import { logger } from '../logging/logging.lsc'
import { getSettings } from '../settings/settings.lsc'

spawnedScans = new Set()

/*****
* We don't return a promise here as we want scanForBlueToothDevices to
* be spun off seperately. Also, if we returned a promise here that calls
* itself recursively we get stuck in appMain.lsc.
* Also we store the running scans in an set so that we can easily kill whatever
* is running on exit - it's possible one scan may not be finished by the time a new scan
* starts, so that's why we keep a record of all the currently running scans instead
* of just the latest one.
*/
scanForBlueToothDevices():void ->
  if !getSettings().blueLossEnabled: return scheduleScan()
  logger.verbose('=======New Scan Started=======')
  spawnHciToolScan()
  scheduleScan()

spawnHciToolScan():void ->
  scan = spawn('hcitool', ['scan'])
  spawnedScans.add(scan)

  scan.stdout.on('data', handleScanResults)
  scan.on('error', (err):void ->
    logger.verbose(err)
    spawnedScans.delete(scan)
  )
  scan.on('close', () -> spawnedScans.delete(scan))

scheduleScan():Promise ->
  setTimeout(
    scanForBlueToothDevices,
    tp`${ getSettings().scanInterval } seconds`
  )

onExit(() => {
  for scan of spawnedScans: scan.kill()
})

export {
  scanForBlueToothDevices,
}

