import isEmpty from 'is-empty'

import { logger } from '../logging/logging.lsc'
import { DeviceType } from '../types/types.lsc'
import { getSettings } from '../settings/settings.lsc'
import { pushUpdatesToFrontEnd } from '../server/server.lsc'
import { updateTimeStampForSingleDeviceSearchingFor } from '../settings/devices.lsc'
import { lockSystemIfDeviceLost } from './lockCheck.lsc'

handleScanResults(scanResult:Buffer):void ->
  deviceList = getDeviceDataFromScanResult(scanResult)
  logger.verbose(`Found these Bluetooth devices in scan: `, { deviceList })

  { devicesToSearchFor } = getSettings()
  timeStampedDeviceList = addTimeStampToSeenDevices(deviceList)

  pushUpdatesToFrontEnd('devicesCanSee', timeStampedDeviceList)

  if isEmpty(devicesToSearchFor): return
  updateDevicesToSearchFor(devicesToSearchFor, deviceList)
  lockSystemIfDeviceLost()

/**
* If any devices we are looking for showed up in the latest scan,
* update the device's lastSeen value to now in devicesToSearchFor.
*/
updateDevicesToSearchFor(devicesToSearchFor, deviceList):void ->
  for elem { deviceId } in deviceList:
    if devicesToSearchFor[deviceId]:
      updateTimeStampForSingleDeviceSearchingFor(deviceId, Date.now())

/*****
* result will be a buffer which as text looks like:
* "Scanning ...\tE0:88:61:CF:F3:52\tMotoG3\n\t12:30:D3:CD:32:51\tn/a\n"
*/
getDeviceDataFromScanResult(scanResult:Buffer):Array<DeviceType> ->
  results = scanResult?.toString().trim().replace('Scanning ...', '')
  if !results?.length: return []

  results.split('\n').reduce((resultsArr, nextResult) ->
    splitIDandName = nextResult.trim().split('\t')
    deviceId = splitIDandName[0].trim()
    deviceName = splitIDandName[1].trim()
    [...resultsArr, {deviceId, deviceName} ]
  )

addTimeStampToSeenDevices(deviceList: Array<DeviceType>):Array<DeviceType> ->
  [ ...for elem device in deviceList: [{...device, lastSeen: Date.now()}] ]

export {
  handleScanResults,
}
