import tp from 'timeproxy'
import lockSystem from 'lock-system'

import { tenYearsFromNow } from '../utils.lsc'
import { logger } from './logging/logging.lsc'
import { getSettings, updateLastSeenForDeviceSearchingFor } from '../settings/settings.lsc'

/**
* If a device is lost we lock the computer, however, after that, if
* the computer is unlocked without the device coming back, we don't want
* to keep locking the computer because the device is still lost. So we
* give the device that has just been lost a lastSeen value of 10 years
* from now (not using Infinity cause it doesn't JSON.stringify for storage).
*/
lockSystemIfDeviceLost():void ->
  { devicesToSearchFor, timeToLock } = getSettings()
  for val { lastSeen, deviceId } in devicesToSearchFor:
    if deviceHasBeenLost(lastSeen, timeToLock):
      lockTheSystem()
      updateLastSeenForDeviceSearchingFor(deviceId, tenYearsFromNow())

deviceHasBeenLost(lastTimeSawDevice: number, timeToLock: number):boolean ->
  Date.now() > (lastTimeSawDevice + tp`${ timeToLock } minutes`)

lockTheSystem():void ->
  if !getSettings().blueLossEnabled: return
  // lockSystem throws on error, so use try/catch
  try:
    lockSystem()
  catch(err):
    logger.error('Error occured trying to lock the system : ', err)

export {
  lockSystemIfDeviceLost
}

