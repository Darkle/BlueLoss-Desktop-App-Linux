import SysTray from 'systray'

import { updateSetting, getSettings } from '../settings/settings.lsc'
import { base64IconData } from './iconsData.lsc'
import { xdgOpenLogsFolder } from '../utils.lsc'
import { logger } from '../logging/logging.lsc'
import { openSettingsWindow } from '../settingsWindow/settingsWindow.lsc'
import { enableDisableBlueLoss } from '../enableDisableBlueLoss.lsc'

let systray = null
blueLossToggledFromTray = true
disableEnableBlueLossMenuActionItemNumber = 1

initTrayMenu():Promise ->
  new Promise((resolve):void ->
    now systray = new SysTray({
      menu: {
        icon: base64IconData[getSettings().trayIconColor],
        tooltip: "BlueLoss",
        items: generateMenuItems()
      },
      debug: false,
      copyDir: true, // copy go tray binary to outside directory, useful for packing tool like pkg.
    })
    systray.onClick(systrayClickHandler)
    systray.onReady(resolve)
  )

/*****
* seq_id:
* 0 - Open settings window
* 1 - Enable/Disable BlueLoss
* 2 - Toggle system tray icon color
* 3 - Open logs folder
* 4 - Exit BlueLoss
*/
systrayClickHandler(action:Object):void ->
  if action.seq_id === 0:
    openSettingsWindow()
  if action.seq_id === 1:
    enableDisableBlueLoss(
      blueLossToggledFromTray,
      !getSettings().blueLossEnabled,
    )
  if action.seq_id === 2:
    toggleTrayIconColorSetting()
    updateSystrayIcon(action)
  if action.seq_id === 3:
    xdgOpenLogsFolder().catch(logger.error)
  if action.seq_id === 4:
    systray.kill()

updateEnabledDisabledMenuItem():void ->
  systray.sendAction({
    type: 'update-item',
    item: {
      checked: false,
      enabled: true,
      title: generateEnabledDisabledLabel(),
      tooltip: generateEnabledDisabledLabel(),
    },
    seq_id: disableEnableBlueLossMenuActionItemNumber,
  })

updateSystrayIcon(action:Object):void ->
  systray.sendAction({
    type: 'update-menu',
    menu: {
      icon: base64IconData[getSettings().trayIconColor],
      tooltip: "BlueLoss",
      items: generateMenuItems()
    },
    seq_id: action.seq_id,
  })

generateMenuItems():Array ->
  [
    {
      title: "Open BlueLoss Settings",
      tooltip: "Open BlueLoss Settings",
      enabled: true
    },
    {
      title: generateEnabledDisabledLabel(),
      tooltip: generateEnabledDisabledLabel(),
      enabled: true
    },
    {
      title: "Toggle Tray Icon Color",
      tooltip: "Toggle Tray Icon Color",
      enabled: true
    },
    {
      title: "Open Logs",
      tooltip: "Open Logs",
      enabled: true
    },
    {
      title: "Quit BlueLoss",
      tooltip: "Quit BlueLoss",
      enabled: true
    }
  ]

toggleTrayIconColorSetting():void ->
  newColor = if getSettings().trayIconColor === 'white': 'blue' else: 'white'
  updateSetting('trayIconColor', newColor)

generateEnabledDisabledLabel():String ->
  `${ if getSettings().blueLossEnabled: 'Disable' else: 'Enable' } BlueLoss`

export {
  initTrayMenu,
  updateEnabledDisabledMenuItem,
}
