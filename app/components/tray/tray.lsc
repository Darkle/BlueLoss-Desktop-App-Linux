import SysTray from 'systray'
import opn from 'opn'

import { updateSetting, getSettings } from '../settings/settings.lsc'
import { base64IconData } from './iconsData.lsc'
import { sendOSnotification } from '../sendOSnotification.lsc'
import { getBlueLossLogsFolderPath } from '../bluelossConfig/createBlueLossConfig.lsc'
import { logger } from '../logging/logging.lsc'
import { openSettingsWindow } from '../settingsWindow/settingsWindow.lsc'

let systray = null

initTrayMenu():Promise ->
  new Promise((resolve) => {
    now systray = new SysTray({
      menu: {
        icon: base64IconData[getTrayIconColor()],
        title: "BlueLoss",
        tooltip: "BlueLoss",
        items: generateMenuItems()
      },
      debug: false,
      copyDir: true, // copy go tray binary to outside directory, useful for packing tool like pkg.
    })
    systray.onClick(systrayClickHandler)
    systray.onReady(resolve)
  })

systrayClickHandler(action:Object):void ->
  if action.seq_id === 0: //Open settings window
    openSettingsWindow()
  if action.seq_id === 1: //Enable/Disable BlueLoss
    updateSetting('blueLossEnabled', !getSettings().blueLossEnabled)
    updateEnabledDisabledMenuItem(action)
    sendOSnotification(generateNotifcationText())
  if action.seq_id === 2: //Toggle system tray icon color
    toggleTrayIconColorSetting()
    updateSystrayIcon(action)
  if action.seq_id === 3: //Open logs folder
    opn(getBlueLossLogsFolderPath()).catch(logger.error)
  if action.seq_id === 4: //Exit BlueLoss
    systray.kill()

updateEnabledDisabledMenuItem(action:Object):void ->
  systray.sendAction({
    type: 'update-item',
    item: {
      ...action.item,
      title: generateEnabledDisabledLabel(),
      tooltip: generateEnabledDisabledLabel(),
    },
    seq_id: action.seq_id,
  })

updateSystrayIcon(action:Object):void ->
  systray.sendAction({
    type: 'update-menu',
    menu: {
      icon: base64IconData[getTrayIconColor()],
      title: "BlueLoss",
      tooltip: "BlueLoss",
      items: generateMenuItems()
    },
    seq_id: action.seq_id,
  })

generateMenuItems():Array ->
  [
    {
      title: "Open BlueLoss Settings",
      tooltip: "Open BlueLoss Settings",
      enabled: true
    },
    {
      title: generateEnabledDisabledLabel(),
      tooltip: generateEnabledDisabledLabel(),
      enabled: true
    },
    {
      title: "Toggle Tray Icon Color",
      tooltip: "Toggle Tray Icon Color",
      enabled: true
    },
    {
      title: "Open Logs",
      tooltip: "Open Logs",
      enabled: true
    },
    {
      title: "Quit BlueLoss",
      tooltip: "Quit BlueLoss",
      enabled: true
    }
  ]

getTrayIconColor():String ->
  if ISDEV: 'white' else: getSettings().trayIconColor

toggleTrayIconColorSetting():void ->
  newColor = if getSettings().trayIconColor === 'white': 'blue' else: 'white'
  updateSetting('trayIconColor', newColor)

generateNotifcationText():String ->
  if getSettings().blueLossEnabled: 'BlueLoss Enabled' else: 'BlueLoss Disabled'

generateEnabledDisabledLabel():String ->
  `${ if getSettings().blueLossEnabled: 'Disable' else: 'Enable' } BlueLoss`

export {
  initTrayMenu,
}
