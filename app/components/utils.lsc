import tp from 'timeproxy'
import execa from 'execa'
import omit from 'lodash.omit'

import { openSettingsWindow } from '../components/settingsWindow/settingsWindow.lsc'
import { logger } from '../components/logging/logging.lsc'
import { getSettings } from './settings/settings.lsc'

getAppVersion():String -> require('../../package.json').version

getScreenResolution():Object|null ->
  try:
    [ width, height ] = execa
      .shellSync(`xrandr |grep \\* |awk '{print $1}'`)
      .stdout
      .split('x')
    return { screenWidth: Number(width), screenHeight: Number(height) }
  catch(e):
    logger.error(e)
    return null

setUpDev():void -> if ISDEV && !getSettings().firstRun: openSettingsWindow().catch(logger.error)

noop() -> return

pipe(...fns) -> param -> fns.reduce((result, fn) -> fn(result), param)

compose(...fns) -> value -> fns.reduceRight((accumulator, current) -> current(accumulator), value)

curry(f) -> (...a) -> (...b) -> f(...a, ...b)

curryRight(f) -> (...a) -> (...b) -> f(...b, ...a)

identity(param) -> param

range(start, end) -> Array.from({length: ((end - start) + 1)}, (v, k) -> k + start) //includes end number

tenYearsFromNow():Number -> Date.now() + tp.FIVE_HUNDRED_WEEKS

generateServerSettingsCookie():String ->
  JSON.stringify(omit(
    getSettings(),
    [
      'trayIconColor',
      'dateLastCheckedForAppUpdate',
      'skipUpdateVersion',
      'firstRun',
    ]
  ))

export {
  getScreenResolution,
  getAppVersion,
  setUpDev,
  noop,
  pipe,
  curry,
  curryRight,
  range,
  compose,
  identity,
  tenYearsFromNow,
  generateServerSettingsCookie,
}
