import low from 'lowdb'
import FileSync from 'lowdb/adapters/FileSync'
import gawk from 'gawk'

import { defaultSettings } from './settingsDefaults.lsc'
import { initSettingsObservers } from './settingsObservers.lsc'
import { getBlueLossSettingsFilePath } from '../bluelossConfig/createBlueLossConfig.lsc'
import { logSettingsUpdateForVerboseLogging as logSettingsUpdates } from '../logging/logSettingsUpdates.lsc'
import { updateTimeStampForAllDevicesSearchingFor } from './devices.lsc'
import { SettingsTypes } from '../types/types.lsc'
import { tenYearsFromNow } from '../utils.lsc'

let db = null
let settings = null

initSettings():Promise ->
  new Promise(resolve ->
    now db = low(new FileSync(getBlueLossSettingsFilePath()))
    db.defaults(defaultSettings).write()
    now settings = gawk(db.getState())
    initSettingsObservers(settings)
    /**
    * When a user starts up BlueLoss after previously exiting, the
    * lastSeen value will be out of date for the devices in
    * devicesToSearchFor. This would cause BlueLoss to lock the
    * system straight away because the lastSeen value + timeToLock
    *  will be less than Date.now(). So to prevent this, we give all
    * devices in devicesToSearchFor a lastSeen of 10 years from now.
    * (when a device is seen again during a scan, lastSeen is updated.)
    */
    updateTimeStampForAllDevicesSearchingFor(tenYearsFromNow())
    resolve()
  )

getSettings() -> settings

updateSetting(newSettingKey: string, newSettingValue: SettingsTypes):void ->
  settings[newSettingKey] = newSettingValue
  db.set(newSettingKey, newSettingValue).write()
  logSettingsUpdates(newSettingKey, newSettingValue)


export {
  initSettings,
  updateSetting,
  getSettings,
}
