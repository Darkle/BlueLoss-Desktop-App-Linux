import path from 'path'

import winston from 'winston'

import { CustomRollbarTransport, rollbarLogger } from './customRollbarTransport.lsc'
import { getSettings } from '../settings/settings.lsc'
import { getBlueLossLogsFolderPath } from '../bluelossConfig/createBlueLossConfig.lsc'

let logger = {}
fiveHundredKilobytes = 500000
rollbarTransportOptions = {
  name: 'rollbarTransport',
  level: 'error',
  handleExceptions: true,
  humanReadableUnhandledException: true,
}
fileTransportOptions = {
  maxsize: fiveHundredKilobytes,
  maxFiles: 6,
  prettyPrint: true,
  depth: 10,
  level: 'verbose'
}

initLogging():void ->
  /*****
  * Note: we're using the old Winston 2.4 branch: https://github.com/winstonjs/winston/tree/2.4.0
  */
  now logger = new winston.Logger({
    level: initialLogLevel(),
    exitOnError: false
  })

  logger.add(
    winston.transports.File,
    {
      ...fileTransportOptions,
      ...{ filename: path.join(getBlueLossLogsFolderPath(), 'BlueLoss.log.txt') },
    }
  )

  if ISDEV:
    logger.add(winston.transports.Console, {
      handleExceptions: true,
      humanReadableUnhandledException: true,
      // json: true
    })
  /*****
  * We dont send errors to rollbar in dev and also only if enabled.
  */
  if !ISDEV and getSettings().reportErrors:
    addRollbarLogging()

addRollbarLogging():void ->
  /**
  * We also need to enable/disable the rollbar module itself as well,
  * as it is set to report uncaught exceptions as well as logging
  * caught errors.
  */
  rollbarLogger.configure({enabled: true})
  logger.add(CustomRollbarTransport, rollbarTransportOptions)

removeRollbarLogging():void ->
  rollbarLogger.configure({enabled: false})
  logger.remove('rollbarTransport')

initialLogLevel():String ->
  if ISDEV || getSettings().verboseLogging: 'verbose' else: 'error'

changeLogLevel(level):void ->
  logger.level = level

export {
  logger,
  addRollbarLogging,
  removeRollbarLogging,
  changeLogLevel,
  initLogging,
}
