import { execSync } from 'child_process'

getFirefoxUserChrome():String -> `
@-moz-document url(chrome://browser/content/browser.xul) {
#TabsToolbar {
  visibility: collapse !important;
}
#nav-bar {
  visibility: collapse !important;
}
}
`

getFirefoxPrefsJs():String -> `
user_pref("browser.tabs.warnOnClose", false);
user_pref("browser.sessionstore.restore_on_demand", false);
user_pref("browser.tabs.warnOnCloseOtherTabs", false);
`
/*****
* Localhost addresses
* ::
* ::1
* 0.0.0.0
* 127.0.0.1
*/
getChromePrefs():Object ->
  screenResolution = getScreenResolution()
  if !screenResolution: return ({})
  browserWindowPosition = generateBrowserWindowPosition(screenResolution)
  ({
    "browser": {
      "app_window_placement": {
        "[::]_/": {
          "maximized": false,
          ...browserWindowPosition
        },
        "[::1]_/": {
          "maximized": false,
          ...browserWindowPosition
        },
        "0": {
          "0": {
            "0": {
              "0_/": {
                "maximized": false,
                ...browserWindowPosition
              }
            }
          }
        },
        "127": {
          "0": {
            "0": {
              "1_/": {
                "maximized": false,
                ...browserWindowPosition
              }
            }
          }
        },
      },
    }
  })

/*****
* We want the chromium browser to end up in the center of the screen
* with a width of 910px and a height of 760px. It's ok if the users screen
* dimensions change later as when they move the window and close it, chromium
* updates that in the Preferences file.
*/
generateBrowserWindowPosition({ screenHeight, screenWidth }):Object ->
  (
    {
      "top": Math.round((screenHeight/2) - (760/2)),
      "bottom": Math.round((screenHeight/2) + (760/2)),
      "left": Math.round((screenWidth/2) - (910/2)),
      "right": Math.round((screenWidth/2) + (910/2))
    }
  )

getScreenResolution():Object|null ->
  try:
    [ width, height ] = execSync(`xrandr |grep \\* |awk '{print $1}'`)
      .toString()
      .trim()
      .split('x')
    return { screenWidth: Number(width), screenHeight: Number(height) }
  catch(e):
    //winston logger isn't ready yet here, so fall back to using console
    console.error(e)
    return null

export {
  getFirefoxUserChrome,
  getFirefoxPrefsJs,
  getChromePrefs,
}
