import { promisify } from 'util'
import { exec, execFile } from 'child_process'
import path from 'path'

import pRatRace from 'promise-rat-race'
// import onExit from 'signal-exit'

import { getServerAddress, tellAllSettingsWindowsToClose } from '../server/server.lsc'
import { getBlueLossConfigFolderPath } from '../bluelossConfig/createBlueLossConfig.lsc'
import { getExecNameFromStdOut, xdgOpenServerWebPage } from '../utils.lsc'

pExec = promisify(exec)
pExecFile = promisify(execFile)

/*****
* We don't want to return a Promise here because pExec will not resolve until the
* settings window is closed (we can just fire and forget).
* Note: we need to use exec (pExec) to run 'command -v ...' as that is a
* shell-specific command.
*/
openSettingsWindow():void ->
  /*****
  * We send a message to all open windows (via Server Side Events) to close themselves, so there
  * isn't more than one settings window open at once.
  */
  tellAllSettingsWindowsToClose()

  pRatRace([
    pExec('command -v firefox'),
    pExec('command -v chromium-browser'),
    pExec('command -v google-chrome'),
  ])
  .then(getExecNameFromStdOut)
  .then(openSettingsWindowInPreferredBrowser)
  .catch(xdgOpenServerWebPage)  //fall back to opening with OS's default browser

openSettingsWindowInPreferredBrowser(browser):Promise ->
  pExecFile(browser,
    if browser === 'firefox': generateFirefoxParams()
    else: generateChromeParams()
  )

generateFirefoxParams():Array<String> ->
  [
    '-new-instance',
    '--width=910',
    '--height=760',
    '-profile',
    getBrowserProfilePath('firefox'),
    getServerAddress(),
  ]

generateChromeParams():Array<String> ->
  [
    `--app=${ getServerAddress() }`,
    `--user-data-dir=${ getBrowserProfilePath('chromium') }`
  ]

getBrowserProfilePath(browserType:String):String ->
  path.join(getBlueLossConfigFolderPath(), 'BrowserProfiles', browserType)

/*****
* Tell settings window to close when main process exits.
*/
// onExit(():void ->
//   console.log('exititing')
//   tellAllSettingsWindowsToClose()
// )

// process.on('exit', () => {
//   console.log('exititing')
//   tellAllSettingsWindowsToClose()
// })

export {
  openSettingsWindow
}
