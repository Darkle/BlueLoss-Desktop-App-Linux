import { promisify } from 'util'
import { exec } from 'child_process'
import path from 'path'

import opn from 'opn'
import pRatRace from 'promise-rat-race'

import { getServerAddress, tellAllSettingsWindowsToClose } from '../server/server.lsc'
import { getBlueLossConfigFolderPath } from '../bluelossConfig/createBlueLossConfig.lsc'
import { capitalizeFirstLetter, getExecNameFromStdOut } from '../utils.lsc'

pExec = promisify(exec)

/*****
* We don't want to return a Promise here because pExec will not resolve until the
* settings window is closed (we can just fire and forget).
*/
openSettingsWindow():void ->
  /*****
  * We send a message to all open windows (via Server Side Events) to close themselves, so there
  * isn't more than one settings window open at once.
  */
  tellAllSettingsWindowsToClose()

  pRatRace([
    pExec('command -v google-chrome'),
    pExec('command -v chromium-browser'),
    pExec('command -v firefox'),
  ])
  .then(getExecNameFromStdOut)
  .then(openSettingsWindowInPreferredBrowser)
  .catch(() -> opn(getServerAddress()))  //fall back to opening with OS's default browser

openSettingsWindowInPreferredBrowser(browser):Promise ->
  if browser === 'firefox': return pExec(generateFirefoxCliParams())
  pExec(generateChromeCliParams(browser))

generateFirefoxCliParams():String ->
  `firefox -new-instance --width=910 --height=760 -profile ${ getBrowserProfilePath('Firefox') } ${ getServerAddress() }`

generateChromeCliParams(browser:String):String ->
  `${ browser } --app=${ getServerAddress() } --user-data-dir=${ getBrowserProfilePath('Chromium') }`

getBrowserProfilePath(browser:String):String ->
  path.join(getBlueLossConfigFolderPath(), 'BrowserProfiles', capitalizeFirstLetter(browser))

export {
  openSettingsWindow
}
