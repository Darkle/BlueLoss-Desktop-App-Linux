import { promisify } from 'util'
import { exec, execFile } from 'child_process'
import path from 'path'

import pRatRace from 'promise-rat-race'

import { getServerAddress } from '../server/server.lsc'
import { getBlueLossConfigFolderPath } from '../bluelossConfig/createBlueLossConfig.lsc'
import { getExecNameFromStdOut, xdgOpenServerWebPage } from '../utils.lsc'

pExec = promisify(exec)
let spawnedSettingsWindow = null

/*****
* We don't want to return a Promise here because pExec will not resolve until the
* settings window is closed (we can just fire and forget).
* Note: we need to use exec (pExec) to run 'command -v ...' as that is a
* shell-specific command.
*/
openSettingsWindow():void ->
  /*****
  * We kill settings window if it's already open so there isn't more than one settings window open
  * at once. This is slightly inefficiant, but wmctrl wasn't installed by default on my machine, so
  * gonna do it this way.
  */
  killSpawnedSettingsWindow()

  pRatRace([
    pExec('command -v firefox'),
    pExec('command -v chromium-browser'),
    pExec('command -v google-chrome'),
  ])
  .then(getExecNameFromStdOut)
  .then(openSettingsWindowInPreferredBrowser)
  .catch(xdgOpenServerWebPage)  //fall back to opening with OS's default browser

openSettingsWindowInPreferredBrowser(browser):Promise ->
  return new Promise((resolve, reject):void ->
    now spawnedSettingsWindow = execFile(
      browser,
      generateBrowserParams(browser),
      (error):void ->
        if error: return reject(error)
        return resolve()
    )
  )

generateBrowserParams(browser):Array<String> ->
  if browser === 'firefox':
    return [
      '-new-instance',
      '--width=910',
      '--height=760',
      '-profile',
      getBrowserProfilePath('firefox'),
      getServerAddress(),
    ]
  [
    `--app=${ getServerAddress() }`,
    `--user-data-dir=${ getBrowserProfilePath('chromium') }`
  ]

getBrowserProfilePath(browserType:String):String ->
  path.join(getBlueLossConfigFolderPath(), 'BrowserProfiles', browserType)

killSpawnedSettingsWindow():void ->
  spawnedSettingsWindow?.kill()
  now spawnedSettingsWindow = null

process.on('exit', () -> killSpawnedSettingsWindow())

export {
  openSettingsWindow
}
