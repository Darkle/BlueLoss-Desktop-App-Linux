import path from 'path'

import opn from 'opn'
import execa from 'execa'
import pRatRace from 'promise-rat-race'

import { getServerAddress, tellAllSettingsWindowsToClose } from '../server/server.lsc'
import { getBlueLossConfigFolderPath } from '../bluelossConfig/createBlueLossConfig.lsc'
import { capitalizeFirstLetter } from '../utils.lsc'

/*****
* We don't want to return a Promise here because execa.shell will not resolve until the
* settings window is closed (we can just fire and forget).
*/
openSettingsWindow():void ->
  /*****
  * We send a message to all open windows (via Server Side Events) to close themselves, so there
  * isn't more than one settings window open at once.
  */
  tellAllSettingsWindowsToClose()

  pRatRace([
    execa.shell('command -v google-chrome'),
    execa.shell('command -v chromium-browser'),
    execa.shell('command -v firefox'),
  ])
  .then(openSettingsWindowInPreferredBrowser)
  .catch(() -> opn(getServerAddress()))  //fall back to opening with OS's default browser

openSettingsWindowInPreferredBrowser({stdout: browserPath}):Promise ->
  browser = getBrowserExecNameFromPath(browserPath)
  if browser === 'firefox': return execa.shell(generateFirefoxCliParams())
  execa.shell(generateChromeCliParams(browser))

generateFirefoxCliParams():String ->
  `firefox -new-instance --width=910 --height=760 -profile ${ getBrowserProfilePath('Firefox') } ${ getServerAddress() }`

generateChromeCliParams(browser:String):String ->
  `${ browser } --app=${ getServerAddress() } --user-data-dir=${ getBrowserProfilePath('Chromium') }`

getBrowserProfilePath(browser:String):String ->
  path.join(getBlueLossConfigFolderPath(), 'BrowserProfiles', capitalizeFirstLetter(browser))

getBrowserExecNameFromPath(browserPath:String):String ->
  browserPath.slice(browserPath.lastIndexOf('/') +1)

export {
  openSettingsWindow
}
